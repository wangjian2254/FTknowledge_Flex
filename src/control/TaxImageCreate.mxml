<?xml version="1.0" encoding="utf-8"?>
<control:CBorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
                          xmlns:s="library://ns.adobe.com/flex/spark"
                          xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:control="control.*"
                          xmlns:uicontrol="uicontrol.*"
                          width="700" height="500" borderVisible="false" backgroundAlpha="0" top="5" bottom="5" left="5"
                          right="5">
    <fx:Script>
		<![CDATA[
        import events.CloseEvent;

        import httpcontrol.HttpServiceUtil;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.core.FlexGlobals;
        import mx.events.DataGridEvent;
        import mx.events.FlexEvent;
        import mx.events.ItemClickEvent;
        import mx.managers.PopUpManager;
        import mx.rpc.events.ResultEvent;

        import spark.components.TitleWindow;

        import uicontrol.BigImage;

        import uicontrol.Confirm;
        import uicontrol.RuleConfirm;

        import util.ToolUtil;

        [Bindable]
        private var taxlist:ArrayCollection = new ArrayCollection();
        [Bindable]
        private var rulelist:ArrayCollection = new ArrayCollection();

        [Bindable]
        private var ruleItemList:ArrayCollection = new ArrayCollection();


        [Bindable]
        public var familylist:ArrayCollection = new ArrayCollection([
            {"id": 1, "text": "仿宋"}
        ]);

        override public function init(e:FlexEvent):void {
            getTemplateList();


        }

        override public function closeContainer(e:CloseEvent):void {
            dispatchEvent(e);

        }

        private function getTemplateList():void {
            HttpServiceUtil.getCHTTPServiceAndResult("/tax/getTemplateList", getTemplateDataResult, "POST").send();
        }

        private function getTemplateDataResult(result:Object, e:ResultEvent):void {
            if (result.success) {
                taxlist.removeAll();
                taxlist.addAll(new ArrayCollection(result.result as Array));
            }
        }

        private var tempItem:Object = null;

        private function selectTemplate():void {
            if (taxtemplateGrid.selectedItem != tempItem) {
                var data:Object = new Object();
                data["templateid"] = taxtemplateGrid.selectedItem.id;
                HttpServiceUtil.getCHTTPServiceAndResult("/tax/getRuleByTemplateList", getRuleDataResult, "POST").send(data);
                tempItem = taxtemplateGrid.selectedItem;
                taxImg.source = tempItem.imgurl+"?flag="+(showZB.selected?"1":"0");
            }
        }

        private function getRuleDataResult(result:Object, e:ResultEvent):void {
            if (result.success) {
                rulelist.removeAll();
                rulelist.addAll(new ArrayCollection(result.result as Array));
                ruleItemList.removeAll();
                ruleItem = null;
            }
        }

        private function createTemplate():void {
            var templateCreater:Confirm = Confirm(PopUpManager.createPopUp(
                    this, Confirm, true) as TitleWindow);
            templateCreater.grid = taxtemplateGrid;
            templateCreater.x = (this.width - templateCreater.width) / 2;
            templateCreater.y = (this.height - templateCreater.height) / 2;
        }

        private function updateTemplate():void {
            if(taxtemplateGrid.selectedItem==null){
                Alert.show("请选择模板","提示")
                return;
            }
            var templateCreater:Confirm = Confirm(PopUpManager.createPopUp(
                    this, Confirm, true) as TitleWindow);
            templateCreater.grid = taxtemplateGrid;
            templateCreater.templateobj = taxtemplateGrid.selectedItem;
            templateCreater.x = (this.width - templateCreater.width) / 2;
            templateCreater.y = (this.height - templateCreater.height) / 2;
        }

        private function deleteTemplate():void{
            if(taxtemplateGrid.selectedItem==null){
                Alert.show("请选择一个模板","提示");
                return ;
            }
            var data:Object = new Object();
            data["templateid"] = taxtemplateGrid.selectedItem.id;
            HttpServiceUtil.getCHTTPServiceAndResult("/tax/deleteTemplate", function(result:Object,e:ResultEvent):void{
                getTemplateList();
            }, "POST").send(data);
        }

        private function createRule():void {
            if (!taxtemplateGrid.selectedItem) {
                Alert.show("请选择一个票据模板", "提示");
                return;
            }
            var templateCreater:RuleConfirm = RuleConfirm(PopUpManager.createPopUp(
                    this, RuleConfirm, true) as TitleWindow);
            templateCreater.orderdata = taxtemplateGrid.selectedItem;
            templateCreater.grid = taxtemplateRule;
            templateCreater.x = (this.width - templateCreater.width) / 2;
            templateCreater.y = (this.height - templateCreater.height) / 2;
        }

        private  function  deleteRule():void{
            if (!taxtemplateRule.selectedItem) {
                Alert.show("请选择一个规则", "提示");
                return;
            }
            var data:Object = new Object();
            data["ruleid"] = taxtemplateRule.selectedItem.id;
            HttpServiceUtil.getCHTTPServiceAndResult("/tax/deleteRule", function(result:Object,e:ResultEvent):void{
                tempItem=null;
                selectTemplate();
            }, "POST").send(data);
        }

        private var ruleItem:Object = null;

        private function selectRule():void {
            if (taxtemplateRule.selectedItem != ruleItem) {
                var data:Object = new Object();
                data["ruleid"] = taxtemplateRule.selectedItem.id;
                HttpServiceUtil.getCHTTPServiceAndResult("/tax/getRuleItemByRuleList", getRuleItemDataResult, "POST").send(data);
                ruleItem = taxtemplateRule.selectedItem;
            }
        }

        private function getRuleItemDataResult(result:Object, e:ResultEvent):void {
            if (result.success) {
                ruleItemList.removeAll();
                ruleItemList.addAll(new ArrayCollection(result.result as Array));

                taxImg.source = '/tax/showTaxImage?ruleid=' + ruleItem.id +"&flag="+(showZB.selected?"1":"0")+ "&t=" + new Date();
            }
        }

        private function templateUpdate(event:DataGridEvent):void {
            var data:Object = taxlist.getItemAt(event.rowIndex);

            if (taxtemplateGrid.itemEditorInstance.data[event.dataField] == taxtemplateGrid.itemEditorInstance[taxtemplateGrid.columns[event.columnIndex].editorDataField]) {
                return;
            }
            data[event.dataField] = taxtemplateGrid.itemEditorInstance[taxtemplateGrid.columns[event.columnIndex].editorDataField];

            HttpServiceUtil.getCHTTPServiceAndResult("/tax/saveTemplate", null, "POST").send(data);

        }

        private function ruleUpdate(event:DataGridEvent):void {
            var data:Object = rulelist.getItemAt(event.rowIndex);
            if (taxtemplateRule.itemEditorInstance.data[event.dataField] == taxtemplateRule.itemEditorInstance[taxtemplateRule.columns[event.columnIndex].editorDataField]) {
                return;
            }
            data[event.dataField] = taxtemplateRule.itemEditorInstance[taxtemplateRule.columns[event.columnIndex].editorDataField];
            HttpServiceUtil.getCHTTPServiceAndResult("/tax/saveRule", null, "POST").send(data);
        }

        private function clickHander(e:ItemClickEvent):void {
            if (e.label == "新增") {
                ruleitemgrid.addNewItem();

            }
            if (e.label == "删除") {
                del();

            }
//                if(e.label=="保存"){
//                    saveRuleItem();
//                }
            if (e.label == "刷新图片") {
                saveRuleItem();
            }
            if (e.label == "拷贝规则") {
                copyRuleItem();
            }
        }

        public function del():void {
            var userArr:Array = new Array();
            var obj:Object;
            var item:Object;
            for (var i:int = ruleItemList.length - 1; i >= 0; i--) {
                item = ruleItemList.getItemAt(i);
                if (!item.selected) {
                    continue;
                }
                if (item.hasOwnProperty("id")) {
                    userArr.push(item.id);
                } else {
                    ruleItemList.removeItemAt(i);
                }
            }
            var data:Object = new Object();
            data["ruleitemids"] = userArr;
            HttpServiceUtil.getCHTTPServiceAndResult("/tax/delRuleItemByids", delRuleItemByidsResult, "POST").send(data);
            ruleitemgrid.invalidateList();
        }

        private function delRuleItemByidsResult(result:Object, event:ResultEvent):void {
            if (result.success) {
                var item:Object;
                for (var i:int = ruleItemList.length - 1; i >= 0; i--) {
                    item = ruleItemList.getItemAt(i);
                    if (!item.selected) {
                        continue;
                    }
                    ruleItemList.removeItemAt(i);
                }
                ruleitemgrid.invalidateList();
            }
        }

        private function copyRuleItem():void{
            if (taxtemplateRule.selectedItem) {
                var data:Object = new Object();
                data["ruleid"] = taxtemplateRule.selectedItem.id;
                HttpServiceUtil.getCHTTPServiceAndResult("/tax/copyRuleItem", copyRuleItemResult, "POST").send(data);
            }
        }
        private function copyRuleItemResult(result:Object, event:ResultEvent):void {
            if (result.success) {
                var data:Object = new Object();
                data["templateid"] = taxtemplateGrid.selectedItem.id;
                HttpServiceUtil.getCHTTPServiceAndResult("/tax/getRuleByTemplateList", getRuleDataResult, "POST").send(data);
            }
        }

        private function saveRuleItem():void {
            if (taxtemplateRule.selectedItem) {

                var data:Object = new Object();
                data["ruleid"] = taxtemplateRule.selectedItem.id;
                var obj:Object = null;
                for (var k:int =  ruleItemList.length-1; k >=0; k--) {
                    obj = ruleItemList.getItemAt(k);

                    if (!obj.x && !obj.y && !obj.size ) {
                        ruleItemList.removeItemAt(ruleItemList.getItemIndex(obj));
                        continue;
                    }
                    if(obj.tuzhang){
                        if(!obj.x || !obj.y ){
                            Alert.show("使用图章需设定x、y值", "警告");
                            return;
                        }
                    }else if(!obj.x || !obj.y || !obj.size || !obj.family || obj.word==='') {
                        Alert.show("请填写必要参数", "警告");
                        return;
                    }
                }
                for (var i:int = 0; i < ruleItemList.length; i++) {
                    obj = ruleItemList.getItemAt(i);
                    if (obj.hasOwnProperty("id")) {
                        data["id" + i] = obj.id;
                    }
                    obj.index = i + 1;
                    if (!obj.x && !obj.y && !obj.size ) {
                        ruleItemList.removeItemAt(ruleItemList.getItemIndex(obj));
                        continue;
                    }

                    data["index" + i] = obj.index;
                    data["x" + i] = obj.x;
                    data["y" + i] = obj.y;
                    data["size" + i] = obj.size;
                    if (isNaN(obj.color)) {
                        obj.color = 0;
                    }
                    data["color" + i] = Number(obj.color);
                    data["family" + i] = obj.family;
                    data["word" + i] = obj.word;
                    data["tuzhang" + i] = obj.tuzhang;

                }
                data['num'] = ruleItemList.length;
                HttpServiceUtil.getCHTTPServiceAndResult("/tax/saveRuleItem", saveRuleItemResult, "POST").send(data);

            }
        }

        private function saveRuleItemResult(result:Object, event:ResultEvent):void {
            if (result.success) {
                for (var i:int = 0; i < ruleItemList.length; i++) {
                    ruleItemList.getItemAt(i)["id"] = result.result["ids"][i];
                }
                ruleitemgrid.invalidateList();
                taxImg.source = '/tax/showTaxImage?ruleid=' + ruleItem.id +"&flag="+(showZB.selected?"1":"0")+ "&t=" + new Date();
            }
        }


        [Bindable]
        private var btnlist:ArrayCollection = new ArrayCollection([
            {'label': '新增', 'ico': addimg},
            {'label': '删除', 'ico': delimg},
            {'label': '刷新图片', 'ico': refreshimg},
            {'label': '拷贝规则', 'ico': saveimg}
        ]);


        public function fontFamilyFun(item:Object, column:AdvancedDataGridColumn):String {
            for each(var obj:Object in familylist) {
                if (obj.id == item.family) {
                    return obj.text;
                }
            }
            return "";
        }

        public function tuzhangFun(item:Object, column:AdvancedDataGridColumn):String {
            for each(var obj:Object in ToolUtil.tuzhangList) {
                if (obj.id == item.tuzhang) {
                    return obj.name;
                }
            }
            return "";
        }

        private function bigImage(event:MouseEvent):void {
            if (event.currentTarget is Image) {
                var s:BigImage = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, BigImage, true) as BigImage;
                s.imgurl = event.currentTarget.source;
            }


        }
        ]]>
	</fx:Script>
    <fx:Declarations>
        <!-- 将非可视元素（例如服务、值对象）放在此处 -->
        <!--  allowMultipleSelection="true"  -->
    </fx:Declarations>
    <s:HGroup gap="5" width="100%" height="100%">
        <s:VGroup gap="4" width="250" height="100%" paddingTop="5" paddingLeft="5">
            <s:HGroup gap="10" width="100%">
                <s:Button label="添加" chromeColor="red" color="#ffffff" click="createTemplate()" height="30"></s:Button>
                <s:Button label="修改" click="updateTemplate()" height="30"></s:Button>
                <s:Button label="删除" click="deleteTemplate()" height="30"></s:Button>
            </s:HGroup>
            <mx:DataGrid width="100%" height="100%" id="taxtemplateGrid" doubleClickEnabled="true"
                         itemClick="selectTemplate()" editable="false"
                         itemEditEnd="templateUpdate(event)" dataProvider="{taxlist}">
                <mx:columns>
                    <mx:DataGridColumn headerText="票据模板" dataField="name" editable="true"
                                       sortable="false"></mx:DataGridColumn>
                </mx:columns>
            </mx:DataGrid>
            <s:HGroup gap="10" width="100%">
                <s:Button label="添加"  chromeColor="red" color="#ffffff" click="createRule()" height="30"></s:Button>
                <s:Button label="删除" click="deleteRule()" height="30"></s:Button>
                <s:CheckBox label="编辑修改" selected="false" id="boxEditRule"></s:CheckBox>
            </s:HGroup>

            <mx:DataGrid width="100%" height="300" id="taxtemplateRule" doubleClickEnabled="true"
                         itemClick="selectRule()" editable="{boxEditRule.selected}" itemEditEnd="ruleUpdate(event)"
                         dataProvider="{rulelist}">
                <mx:columns>
                    <mx:DataGridColumn headerText="生成规则" dataField="name" editable="true"></mx:DataGridColumn>
                </mx:columns>
            </mx:DataGrid>
        </s:VGroup>

        <s:VGroup width="100%" height="100%">
            <s:Image id="taxImg" x="0" y="0" height="100%" click="bigImage(event)"></s:Image>

            <s:HGroup width="100%" height="30" gap="20">
                <s:Spacer width="20"></s:Spacer>
                <mx:ButtonBar dataProvider="{btnlist}" iconField="ico" height="30" itemClick="clickHander(event)">
                </mx:ButtonBar>
                <s:CheckBox id="showZB"  label="显示坐标" selected="true" ></s:CheckBox>
            </s:HGroup>

            <s:Scroller width="100%" height="300">
                <s:Group width="100%" height="100%">
                    <uicontrol:MarkAdvancedDataGrid id="ruleitemgrid" dataProvider="{ruleItemList}" isNewAdd="true"
                                                    enabled="true" editable="true" minWidth="1100" height="100%">
                        <uicontrol:groupedColumns>
                            <mx:AdvancedDataGridColumn headerText="选择" dataField="selected" sortable="false" width="60"
                                                       editorDataField="selected" rendererIsEditor="true">
                                <mx:itemRenderer>
                                    <fx:Component>
                                        <mx:HBox horizontalAlign="center">
                                            <fx:Script>
										<![CDATA[
                                                public function get selected():Boolean {
                                                    return cb.selected;
                                                }

                                                public function set selected(value:Boolean):void {
                                                    cb.selected = value;
                                                }
                                                ]]>
									</fx:Script>

                                            <mx:CheckBox id="cb" selected="{data.selected}">

                                            </mx:CheckBox>
                                        </mx:HBox>
                                    </fx:Component>
                                </mx:itemRenderer>
                            </mx:AdvancedDataGridColumn>
                            <mx:AdvancedDataGridColumn headerText="索引" dataField="index" width="60">
                            </mx:AdvancedDataGridColumn>

                            <mx:AdvancedDataGridColumn headerText="x轴" dataField="x" width="70">

                            </mx:AdvancedDataGridColumn>
                            <mx:AdvancedDataGridColumn headerText="y轴" dataField="y" width="70">

                            </mx:AdvancedDataGridColumn>

                            <mx:AdvancedDataGridColumn headerText="字体大小" dataField="size" width="100">

                            </mx:AdvancedDataGridColumn>

                            <mx:AdvancedDataGridColumn headerText="字体类型" dataField="family" editorDataField="data"
                                                       width="70" labelFunction="fontFamilyFun">
                                <mx:itemEditor>
                                    <fx:Component>
                                        <mx:HBox
                                                implements="mx.controls.listClasses.IDropInListItemRenderer,mx.managers.IFocusManagerComponent">
                                            <fx:Script>
											<![CDATA[
                                                import mx.controls.dataGridClasses.DataGridListData;
                                                import mx.controls.listClasses.BaseListData;

                                                private var _listData:DataGridListData;
                                                // Define a property for returning the new value to the cell.
                                                [Bindable]
                                                private var _value:Object;


                                                override public function drawFocus(draw:Boolean):void {
                                                    //											outerDocument.getMacAll();
                                                    cbo.setFocus();
                                                    cbo.open();

                                                }

                                                override public function get data():Object {
                                                    if (cbo == null) {
                                                        return super.data;
                                                    } else {
                                                        if (cbo.selectedIndex == -1) {
                                                            for each(var it:Object in cbo.dataProvider) {
                                                                if (it[cbo.labelField] == cbo.data || it[cbo.valueField] == cbo.data) {
                                                                    return it[cbo.valueField]
                                                                }
                                                            }
                                                            return null;
                                                        }
                                                        return cbo.data;
                                                    }
                                                }

                                                override public function set data(value:Object):void {
                                                    super.data = value[_listData.dataField];
                                                    _value = value;
                                                    cbo.setValue(value[_listData.dataField]);

                                                    //
//													changeFilterValue();
                                                }

                                                public function get listData():BaseListData {
                                                    return _listData;
                                                }

                                                public function set listData(value:BaseListData):void {
                                                    _listData = DataGridListData(value);
                                                    cbo.listData = DataGridListData(value);
                                                }
                                                ]]>
										</fx:Script>
                                            <uicontrol:FliterComboBox id="cbo" dataProvider="{outerDocument.familylist}"
                                                                      labelField="text" valueField="id"
                                                                      height="{this.height}" width="{this.width}"
                                                                      styleName="fliterComboBox" dropdownWidth="200">

                                            </uicontrol:FliterComboBox>
                                        </mx:HBox>
                                    </fx:Component>
                                </mx:itemEditor>
                            </mx:AdvancedDataGridColumn>
                            <mx:AdvancedDataGridColumn headerText="文字内容" dataField="word" width="200">

                            </mx:AdvancedDataGridColumn>
                            <mx:AdvancedDataGridColumn headerText="字体颜色" dataField="color" rendererIsEditor="true"
                                                       editorDataField="data" width="70">
                                <mx:itemRenderer>
                                    <fx:Component>
                                        <mx:HBox>
                                            <fx:Script>
                                            <![CDATA[
                                                private var vv:Object;

                                                override public function get data():Object {
                                                    return vv;
                                                }

                                                override public function set data(v:Object):void {
                                                    vv = v;
                                                    if (v) {
                                                        if(v["color"]===""){
                                                            v["color"]=0;
                                                        }
                                                        colorPicker.selectedColor = Number(v["color"]);
                                                    }

                                                }

                                                private function selectFontColor():void {
                                                    vv["color"] = colorPicker.selectedColor;
                                                }
                                                ]]>
                                            </fx:Script>
                                            <mx:ColorPicker id="colorPicker" change="selectFontColor()" color="#010000"
                                                            selectedColor="#000000"
                                                            symbolColor="#030002">

                                            </mx:ColorPicker>
                                        </mx:HBox>
                                    </fx:Component>
                                </mx:itemRenderer>
                            </mx:AdvancedDataGridColumn>
                            <mx:AdvancedDataGridColumn headerText="图章" dataField="tuzhang" editorDataField="data"
                                                       width="100" labelFunction="tuzhangFun">
                                <mx:itemEditor>
                                    <fx:Component>
                                        <mx:HBox
                                                implements="mx.controls.listClasses.IDropInListItemRenderer,mx.managers.IFocusManagerComponent">
                                            <fx:Script>
								<![CDATA[
                                                    import mx.collections.ArrayCollection;
                                                    import mx.controls.dataGridClasses.DataGridListData;
                                                    import mx.controls.listClasses.BaseListData;

                                                    import util.ToolUtil;

                                                    private var _listData:DataGridListData;
                                                    // Define a property for returning the new value to the cell.
                                                    [Bindable]
                                                    private var _value:Object;

                                                    [Bindable]
                                                    private var list:ArrayCollection = new ArrayCollection();

                                                    // Implement the drawFocus() method for the VBox.
                                                    override public function drawFocus(draw:Boolean):void {
                                                        tuzhang.setFocus();
                                                        tuzhang.open();

                                                    }


                                                    override public function get data():Object {
                                                        if (tuzhang == null) {
                                                            return super.data;
                                                        } else {
                                                            if (tuzhang.selectedIndex == -1) {
                                                                for each(var it:Object in tuzhang.dataProvider) {
                                                                    if (it[tuzhang.labelField] == tuzhang.data || it[tuzhang.valueField] == tuzhang.data) {
                                                                        return it[tuzhang.valueField]
                                                                    }
                                                                }
                                                                return null;
                                                            }
                                                            return tuzhang.data;
                                                        }
                                                    }

                                                    override public function set data(value:Object):void {
                                                        super.data = value[_listData.dataField];
                                                        _value = value;
                                                        changeFilterValue();
                                                        tuzhang.setValue(value[_listData.dataField]);

                                                        //
                                                        //													changeFilterValue();
                                                    }

                                                    public function get listData():BaseListData {
                                                        return _listData;
                                                    }

                                                    public function set listData(value:BaseListData):void {
                                                        _listData = DataGridListData(value);
                                                        tuzhang.listData = DataGridListData(value);
                                                    }

                                                    public function changeCode():void {
                                                        if (tuzhang.selectedItem == null) {
                                                            return;
                                                        }

                                                    }

                                                    public function changeFilterValue():void {
                                                        if (tuzhang.filtervalue != _value.tuzhang) {
                                                            tuzhang.filtervalue = _value.tuzhang;
                                                        }
                                                    }
                                                    ]]>
										</fx:Script>
                                            <uicontrol:FliterComboBox id="tuzhang" dataProvider="{ToolUtil.tuzhangList}"
                                                                      labelField="name" valueField="id"
                                                                      height="{this.height}" width="{this.width}"
                                                                      styleName="fliterComboBox" dropdownWidth="200">

                                            </uicontrol:FliterComboBox>
                                        </mx:HBox>
                                    </fx:Component>
                                </mx:itemEditor>
                            </mx:AdvancedDataGridColumn>
                        </uicontrol:groupedColumns>

                    </uicontrol:MarkAdvancedDataGrid>
                </s:Group>
            </s:Scroller>
        </s:VGroup>
    </s:HGroup>
</control:CBorderContainer>
